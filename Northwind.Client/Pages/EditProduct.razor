@page "/product/edit"
@using Northwind.Client.ViewModels
@inject HttpClient HttpClient

<section class="create-product-form">
    <h2>Redigera produkt</h2>

    <div>
        <label for="productId">Ange produkt-ID:</label>
        <InputNumber id="productId" @bind-Value="productId" class="input" />
        <button @onclick="GetProductInfo" class="submit-btn">Hämta produkt</button>
    </div>

    @if (ProductToEdit != null)
    {
        <EditForm Model="ProductToEdit" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="validation-summary" />

            <div class="form-group">
                <label>Produktnamn:</label>
                <InputText @bind-Value="ProductToEdit.ProductName" class="input" />
            </div>

            <div class="form-group">
                <label>Kategori:</label>
                <select @bind="ProductToEdit.CategoryId" class="input">
                    <option value="">-- Välj kategori --</option>
                    @foreach (var category in Categories)
                    {
                        <option value="@category.CategoryId">@category.CategoryName</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label>Leverantör:</label>
                <select @bind="ProductToEdit.SupplierId" class="input">
                    <option value="">-- Välj leverantör --</option>
                    @foreach (var supplier in Suppliers)
                    {
                        <option value="@supplier.SupplierId">@supplier.CompanyName</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label>Kvantitet per enhet:</label>
                <InputText @bind-Value="ProductToEdit.QuantityPerUnit" class="input" />
            </div>

            <div class="form-group">
                <label>Pris:</label>
                <InputNumber @bind-Value="ProductToEdit.UnitPrice" class="input" />
            </div>

            <div class="form-group">
                <label>I lager:</label>
                <InputNumber @bind-Value="ProductToEdit.UnitsInStock" class="input" />
            </div>

            <div class="form-group">
                <label>På beställning:</label>
                <InputNumber @bind-Value="ProductToEdit.UnitsOnOrder" class="input" />
            </div>

            <div class="form-group">
                <label>Beställningsgräns:</label>
                <InputNumber @bind-Value="ProductToEdit.ReorderLevel" class="input" />
            </div>

            <div class="form-group checkbox">
                <label>Utgått:</label>
                <InputCheckbox @bind-Value="ProductToEdit.Discontinued" />
            </div>

            <button type="submit" class="submit-btn">Spara ändringar</button>
        </EditForm>
    }

    @if (!string.IsNullOrEmpty(ResultMessage))
    {
        <p class="result-msg">@ResultMessage</p>
    }
</section>

<style>
    .create-product-form {
        max-width: 600px;
        margin: 2rem auto;
        background: #fff;
        padding: 2rem;
        border-radius: 16px;
        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.08);
        font-family: 'Segoe UI', sans-serif;
    }

        .create-product-form h2 {
            text-align: center;
            font-size: 1.6rem;
            margin-bottom: 1.5rem;
            color: #333;
        }

    .form-group {
        margin-bottom: 1rem;
    }

        .form-group label {
            display: block;
            margin-bottom: 0.3rem;
            font-weight: 600;
            color: #333;
        }

    .input {
        width: 100%;
        padding: 0.6rem;
        font-size: 1rem;
        border: 1px solid #ccc;
        border-radius: 8px;
        box-sizing: border-box;
    }

    .checkbox {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .submit-btn {
        background-color: #007bff;
        color: white;
        padding: 0.7rem 1.5rem;
        border: none;
        border-radius: 10px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.2s ease;
        display: block;
        margin: 1.5rem auto 0;
    }

        .submit-btn:hover {
            background-color: #0056b3;
        }

    .result-msg {
        margin-top: 1.5rem;
        text-align: center;
        color: #28a745;
        font-weight: bold;
    }

    .validation-summary {
        margin-bottom: 1rem;
        padding: 1rem;
        background-color: #fff3cd;
        border: 1px solid #ffeeba;
        border-radius: 10px;
        color: #856404;
    }

        .validation-summary ul {
            margin: 0;
            padding-left: 1.25rem;
        }

        .validation-summary li {
            margin-bottom: 0.5rem;
        }
</style>
@code {
    [Parameter] public int productId { get; set; }
    public ProductCreateViewModel ProductToEdit { get; set; } = new();
    public string? ResultMessage;
    public List<CategoryViewModel> Categories { get; set; } = new();
    public List<SupplierViewModel> Suppliers { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Categories = await HttpClient.GetFromJsonAsync<List<CategoryViewModel>>("https://localhost:7079/api/Category");
        Suppliers = await HttpClient.GetFromJsonAsync<List<SupplierViewModel>>("https://localhost:7079/api/Supplier");

        var productResponse = await HttpClient.GetFromJsonAsync<ProductCreateViewModel>($"https://localhost:7079/api/Product/{productId}");
        if (productResponse != null)
        {
            ProductToEdit = productResponse;  // Fyll formuläret med produktens data
        }
        else
        {
            ResultMessage = "Product not found!";
        }
    }
    
    private async Task GetProductInfo()
    {
        if (productId > 0)
        {
            var response = await HttpClient.GetFromJsonAsync<ProductCreateViewModel>($"https://localhost:7079/api/Product/{productId}");
            if (response != null)
            {
                ProductToEdit = response;
            }
            else
            {
                ResultMessage = "Product not found.";
            }
        }
        else
        {
            ResultMessage = "Please enter a valid product ID.";
        }
    }

    private async Task HandleValidSubmit()
    {
        var response = await HttpClient.PutAsJsonAsync($"https://localhost:7079/api/Product/{productId}", ProductToEdit);
        if (response.IsSuccessStatusCode)
        {
            ResultMessage = "Product updated successfully!";
        }
        else
        {
            ResultMessage = "Error updating product.";
        }
    }
}
