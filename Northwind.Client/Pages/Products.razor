@page "/product/show-all"
@using Newtonsoft.Json
@using Northwind.Client.ViewModels
@inject HttpClient HttpClient

<div class="filters">
    <label>
        Kategori:
        <select @bind="selectedCategoryId">
            <option value="">Alla</option>
            @foreach (var category in categories)
            {
                <option value="@category.CategoryId">@category.CategoryName</option>
            }
        </select>
    </label>

    <label>
        Leverantör:
        <select @bind="selectedSupplierId">
            <option value="">Alla</option>
            @foreach (var supplier in suppliers)
            {
                <option value="@supplier.SupplierId">@supplier.CompanyName</option>
            }
        </select>
    </label>
</div>

@if (ProductList == null)
{
    <p>Laddar produkter...</p>
}
else
{
    <section class="product-grid">
        @foreach (var product in filteredProducts)
        {
            <div class="product-card">
                <h3>@product.ProductName</h3>
                <p><strong>Kategori:</strong>@GetCategoryName(product.CategoryId)</p>
                <p><strong>Leverantör:</strong>@GetSupplierName(product.SupplierId)</p>
                <p><strong>Kvantitet per enhet:</strong> @product.QuantityPerUnit</p>
                <p><strong>Pris:</strong> <span class="price">@product.UnitPrice kr</span></p>
                <p><strong>I lager:</strong> @product.UnitsInStock</p>
                <p><strong>På beställning:</strong> @product.UnitsOnOrder</p>
                <p><strong>Beställningsgräns:</strong> @product.ReorderLevel</p>
                <p>
                    <strong>Utgått:</strong>
                    @if (product.Discontinued)
                    {
                        <span class="discontinued">Ja</span>
                    }
                    else
                    {
                        <span class="available">Nej</span>
                    }
                </p>
            </div>
        }
    </section>
}

}

<style>
    .filters {
        margin-bottom: 2rem;
        display: flex;
        gap: 2rem;
        justify-content: center;
        font-family: 'Segoe UI', sans-serif;
    }

        .filters label {
            font-weight: bold;
            font-size: 1rem;
        }

        .filters select {
            padding: 0.5rem;
            font-size: 1rem;
            border-radius: 8px;
            border: 1px solid #ccc;
            font-family: 'Segoe UI', sans-serif;
        }

    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 1.5rem;
        padding: 2rem;
        background-color: #f7f9fb;
    }

    .product-card {
        background: #ffffff;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.08);
        padding: 1.5rem;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

        .product-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 6px 14px rgba(0, 123, 255, 0.15);
        }

        .product-card h3 {
            margin-top: 0;
            font-size: 1.3rem;
            color: #007bff;
        }

        .product-card p {
            margin: 0.4rem 0;
            font-size: 0.95rem;
            color: #444;
        }

        .product-card strong {
            color: #000;
        }

    .price {
        font-weight: bold;
        color: #28a745;
    }

    .discontinued {
        color: #dc3545;
        font-weight: bold;
    }

    .available {
        color: #28a745;
        font-weight: bold;
    }
</style>

@code{
    public List<ProductViewModel>? ProductList { get; set; }
    public List<ProductViewModel>? filteredProducts { get; set; }

    public List<CategoryViewModel> categories { get; set; } = new List<CategoryViewModel>();
    public List<SupplierViewModel> suppliers { get; set; } = new List<SupplierViewModel>();

    public int? selectedCategoryId { get; set; } = null;
    public int? selectedSupplierId { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await HttpClient.GetAsync("https://localhost:7079/api/Product");
            response.EnsureSuccessStatusCode();
            var body = await response.Content.ReadAsStringAsync();
            ProductList = JsonConvert.DeserializeObject<List<ProductViewModel>>(body);

            var categoryResponse = await HttpClient.GetAsync("https://localhost:7079/api/Category");
            categoryResponse.EnsureSuccessStatusCode();
            var categoryBody = await categoryResponse.Content.ReadAsStringAsync();
            categories = JsonConvert.DeserializeObject<List<CategoryViewModel>>(categoryBody);

            var supplierResponse = await HttpClient.GetAsync("https://localhost:7079/api/Supplier");
            supplierResponse.EnsureSuccessStatusCode();
            var supplierBody = await supplierResponse.Content.ReadAsStringAsync();
            suppliers = JsonConvert.DeserializeObject<List<SupplierViewModel>>(supplierBody);

            filteredProducts = ProductList;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fel vid hämtning: {ex.Message}");
        }
    }

    private void ApplyFilters()
    {
        filteredProducts = ProductList;

        if (selectedCategoryId.HasValue)
        {
            filteredProducts = filteredProducts.Where(p => p.CategoryId == selectedCategoryId).ToList();
        }

        if (selectedSupplierId.HasValue)
        {
            filteredProducts = filteredProducts.Where(p => p.SupplierId == selectedSupplierId).ToList();
        }

        StateHasChanged();
    }

    private string GetCategoryName(int categoryId)
    {
        var category = categories.FirstOrDefault(c => c.CategoryId == categoryId);
        return category?.CategoryName ?? "Okänd kategori";
    }

    private string GetSupplierName(int supplierId)
    {
        var supplier = suppliers.FirstOrDefault(s => s.SupplierId == supplierId);
        return supplier?.CompanyName ?? "Okänd leverantör";
    }
}
}
